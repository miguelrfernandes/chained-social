name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DFX_VERSION: 0.27.0

jobs:
  security:
    name: üîê Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown

  test-build-deploy:
    name: üé∏ Test, Build, and Deploy
    runs-on: ubuntu-latest
    needs: security
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: üì¶ Install just
        uses: taiki-e/install-action@just

      - name: üì¶ Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: "0.27.0"

      - name: üöÄ Deploy and build
        run: |
          just troubleshoot
          just deploy

      - name: üß™ Run tests
        run: |
          just test
        continue-on-error: true

      - name: üîç Validate deployment
        run: |
          just status

      # - name: üöÄ Deploy to playground (PR only)
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     just troubleshoot
      #     just deploy
      #     just deploy-playground

      # - name: üìã Get playground URLs
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     echo "üé™ Playground Deployment URLs:" >> $GITHUB_STEP_SUMMARY
      #     FRONTEND_ID=$(dfx canister id frontend --network playground)
      #     BACKEND_ID=$(dfx canister id backend --network playground)
      #     CONTENT_ID=$(dfx canister id content --network playground)
      #     SOCIALGRAPH_ID=$(dfx canister id socialgraph --network playground)
          
      #     echo "### üîó Playground URLs" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Frontend**: https://${FRONTEND_ID}.icp0.io/" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Backend Canister**: ${BACKEND_ID}" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Content Canister**: ${CONTENT_ID}" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Social Graph Canister**: ${SOCIALGRAPH_ID}" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "### üß™ Testing" >> $GITHUB_STEP_SUMMARY
      #     echo "You can test your changes by visiting the frontend URL above." >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "### üìä Status" >> $GITHUB_STEP_SUMMARY
      #     echo "- ‚úÖ Security scan passed" >> $GITHUB_STEP_SUMMARY
      #     echo "- ‚úÖ Build completed" >> $GITHUB_STEP_SUMMARY
      #     echo "- ‚úÖ Tests passed" >> $GITHUB_STEP_SUMMARY
      #     echo "- ‚úÖ Deployment successful" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "---" >> $GITHUB_STEP_SUMMARY
      #     echo "*This is an automated deployment for PR #${GITHUB_ISSUE_NUMBER}*" >> $GITHUB_STEP_SUMMARY

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            *.log
            dfx.log

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/dist/
            src/declarations/
            .dfx/

  lint:
    name: üîç Super-Linter
    runs-on: ubuntu-latest
    needs: security
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: üîç Run Super-Linter
        uses: super-linter/super-linter@v8
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: .github/linters
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
          SAVE_SUPER_LINTER_SUMMARY: true
          # Include only relevant directories
          FILTER_REGEX_INCLUDE: (^frontend/|^backend/|^content/|^socialgraph/|^scripts/|^docs/|^justfile|^dfx\.json|^package\.json|^README\.md)
          # Exclude generated files and build artifacts
          FILTER_REGEX_EXCLUDE: (^frontend/dist/|^src/declarations/|^\.dfx/|^node_modules/|^\.git/|^\.github/|^\.vscode/)
          # Ignore generated files
          IGNORE_GENERATED_FILES: true
          # Ignore gitignored files
          IGNORE_GITIGNORED_FILES: true

  